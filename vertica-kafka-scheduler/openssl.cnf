# The root CA should only sign intermediate certificates that match. See the POLICY FORMAT section of `man ca`.
[ policy_match ]
countryName             = match
stateOrProvinceName     = match
localityName            = match
organizationName        = match
organizationalUnitName  = optional
commonName              = optional
emailAddress            = optional

# Allow the intermediate CA to sign a more diverse range of certificates.
[ policy_anything ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = optional
emailAddress            = optional

####################################################################
# Options for the `req` tool (`man req`).
[ req ]
default_bits        = 2048
default_keyfile     = priv.key.pem
distinguished_name  = req_distinguished_name
string_mask         = utf8only
x509_extensions     = v3_ca                # The extentions to add to the self signed cert

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
countryName_default             = US
countryName_min                 = 2
countryName_max                 = 2

stateOrProvinceName             = State or Province Name (full name)
stateOrProvinceName_default     = Massachusetts

localityName                    = Locality Name (eg, city)
localityName_default            = Cambridge

0.organizationName              = Organization Name (eg, company)
0.organizationName_default      = OpenText

organizationalUnitName          = Organizational Unit Name (eg, section)
organizationalUnitName_default  = Vertica

commonName                      = Common Name
commonName_max                  = 64

emailAddress                    = Email Address
emailAddress_default            = example-cert@microfocus.com
emailAddress_max                = 64

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
basicConstraints = critical, CA:true
keyUsage = cRLSign, keyCertSign
nsCertType = sslCA, client, email, objsign, server

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, keyCertSign

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName=@alt_names

[alt_names]
DNS.1 = __DNS__
DNS.2 = vertica.com
IP.1 = __IP__
IP.2 = 127.0.0.1

[ schema_server_cert ]
# Extensions for schema registry server certificates (`man x509v3_config`).
# # This goes against PKIX guidelines but some CAs do it and some software
# # requires this to avoid interpreting an end user certificate as a CA.
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Schema Registry Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName=@localhost_alt_name

[localhost_alt_name]
DNS.1 = localhost

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always,issuer:always
